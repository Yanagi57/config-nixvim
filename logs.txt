-- Ignore the user lua configuration
vim.opt.runtimepath:remove(vim.fn.stdpath('config'))              -- ~/.config/nvim
vim.opt.runtimepath:remove(vim.fn.stdpath('config') .. "/after")  -- ~/.config/nvim/after

-- Nixvim's internal module table
-- Can be used to share code throughout init.lua
local _M = {}

-- Set up globals {{{
do
  local nixvim_globals = { mapleader = " " }

  for k,v in pairs(nixvim_globals) do
    vim.g[k] = v
  end
end
-- }}}

-- Set up options {{{
do
  local nixvim_options = { backup = false, breakindent = true, clipboard = "unnamedplus", colorcolumn = "180", expandtab = true, foldenable = false, foldlevel = 2, foldmethod = "indent", foldnestmax = 10, hlsearch = false, incsearch = true, number = true, relativenumber = true, scrolloff = 10, shiftwidth = 4, showmode = false, signcolumn = "yes", smartindent = true, softtabstop = 4, splitbelow = true, splitright = true, swapfile = false, tabstop = 4, termguicolors = true, undofile = true, updatetime = 250, wrap = false }

  for k,v in pairs(nixvim_options) do
    vim.opt[k] = v
  end
end
-- }}}


local ayu = require("ayu")
ayu.setup({ })
ayu.colorscheme()

local cmp = require('cmp')
cmp.setup({ mapping = { ["<C-Space>"] = cmp.mapping.complete({}), ["<C-b>"] = cmp.mapping.scroll_docs(-4), ["<C-f>"] = cmp.mapping.scroll_docs(4), ["<C-n>"] = cmp.mapping.select_next_item(), ["<C-p>"] = cmp.mapping.select_prev_item(), ["<C-y>"] = cmp.mapping.confirm({ select = true }) }, sources = { { name = "nvim_lsp" }, { name = "path" }, { name = "buffer" } } })


require('which-key').setup({ })

require('nvim-web-devicons').setup({ })


vim.opt.runtimepath:prepend(vim.fs.joinpath(vim.fn.stdpath('data'), 'site'))
require('nvim-treesitter.configs').setup({ auto_install = false, highlight = { additional_vim_regex_highlighting = true, enable = true }, indent = { enable = true }, parser_install_dir = vim.fs.joinpath(vim.fn.stdpath('data'), 'site'), sync_install = false })

require('telescope').setup({ })

local __telescopeExtensions = { }
for i, extension in ipairs(__telescopeExtensions) do
  require('telescope').load_extension(extension)
end

require('oil').setup({ })

require('lualine').setup({ })

require('conform').setup({ format_on_save = function(bufnr)
  -- Disable "format_on_save lsp_fallback" for languages that don't
  -- have a well standardized coding style. You can add additional
  -- languages here or re-enable it for the disabled ones.
  local disable_filetypes = { c = true, cpp = true }
  return {
      timeout_ms = 500,
      lsp_fallback = not disable_filetypes[vim.bo[bufnr].filetype],
  }
end
, notify_on_error = false })

require('Comment').setup({ })

-- LSP {{{
do
  

  local __lspServers = { { extraOptions = { filetypes = { "rust" }, on_attach = function(client, bufnr)
  
  function(_, bufnr)
  vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })
end

end
, settings = { ["rust-analyzer"] = { cargo = { features = "all" } } } }, name = "rust_analyzer" } }
  -- Adding lspOnAttach function to nixvim module lua table so other plugins can hook into it.
  _M.lspOnAttach = function(client, bufnr)
    

    
  end
  local __lspCapabilities = function()
    capabilities = vim.lsp.protocol.make_client_capabilities()

    capabilities = vim.tbl_deep_extend("force", capabilities, require('cmp_nvim_lsp').default_capabilities())


    return capabilities
  end

  local __setup = {
            on_attach = _M.lspOnAttach,
            capabilities = __lspCapabilities()
          }

  for i,server in ipairs(__lspServers) do
    if type(server) == "string" then
      require('lspconfig')[server].setup(__setup)
    else
      local options = server.extraOptions

      if options == nil then
        options = __setup
      else
        options = vim.tbl_extend("keep", options, __setup)
      end

      require('lspconfig')[server.name].setup(options)
    end
  end

  
end
-- }}}

-- Set up keybinds {{{
do
  local __nixvim_binds = { { action = "<cmd>Telescope buffers<cr>", key = "<leader><leader>", mode = "n", options = { desc = "[ ] Find existing buffers" } }, { action = "<cmd>Telescope oldfiles<cr>", key = "<leader>s.", mode = "n", options = { desc = "[S]earch Recent Files ('.' for repeat)" } }, { action = "<cmd>Telescope diagnostics<cr>", key = "<leader>sd", mode = "n", options = { desc = "[S]earch [D]iagnostics" } }, { action = "<cmd>Telescope find_files<cr>", key = "<leader>sf", mode = "n", options = { desc = "[S]earch [F]iles" } }, { action = "<cmd>Telescope live_grep<cr>", key = "<leader>sg", mode = "n", options = { desc = "[S]earch by [G]rep" } }, { action = "<cmd>Telescope help_tags<cr>", key = "<leader>sh", mode = "n", options = { desc = "[S]earch [H]elp" } }, { action = "<cmd>Telescope keymaps<cr>", key = "<leader>sk", mode = "n", options = { desc = "[S]earch [K]eymaps" } }, { action = "<cmd>Telescope resume<cr>", key = "<leader>sr", mode = "n", options = { desc = "[S]earch [R]esume" } }, { action = "<cmd>Telescope builtin<cr>", key = "<leader>ss", mode = "n", options = { desc = "[S]earch [S]elect Telescope" } }, { action = "<cmd>Telescope grep_string<cr>", key = "<leader>sw", mode = "n", options = { desc = "[S]earch current [W]ord" } }, { action = "<cmd>Oil<CR>", key = "<leader>pv", mode = "n", options = { desc = "Show Project Files" } }, { action = ":m '>+1<CR>gv=gv", key = "J", mode = "v", options = { desc = "Move Line Up" } }, { action = ":m '<-2<CR>gv=gv", key = "K", mode = "v", options = { desc = "Move Line Down" } }, { action = "mzJ`z", key = "J", mode = "n", options = { desc = "Remove New Line Character of Current Line" } }, { action = "<C-d>zz", key = "<C-d>", mode = "n", options = { desc = "Scroll Down" } }, { action = "<C-u>zz", key = "<C-u>", mode = "n", options = { desc = "Scroll Up" } }, { action = "nzzzv", key = "n", mode = "n", options = { desc = "Move to Next Occurrence" } }, { action = "Nzzzv", key = "N", mode = "n", options = { desc = "Move to Previous Occurrence" } }, { action = "<cmd>nohlsearch<CR>", key = "<Esc>", mode = "n" }, { action = "[[\"+y\"]]", key = "<leader>y", mode = { "n", "v" }, options = { desc = "Copy to Clipboard" } }, { action = "<Esc>", key = "<C-c>", mode = "i" }, { action = "vim.diagnostic.goto_prev", key = "[d", mode = "n", options = { desc = "Go to previous [D]iagnostic message" } }, { action = "vim.diagnostic.goto_next", key = "]d", mode = "n", options = { desc = "Go to next [D]iagnostic message" } }, { action = "vim.diagnostic.open_float", key = "<leader>e", mode = "n", options = { desc = "Show diagnostic [E]rror messages" } }, { action = "<C-w>h", key = "<C-h>", mode = "n", options = { desc = "Move focus to the left window" } }, { action = "<C-w>l", key = "<C-l>", mode = "n", options = { desc = "Move focus to the right window" } }, { action = "<C-w>j", key = "<C-j>", mode = "n", options = { desc = "Move focus to the lower window" } }, { action = "<C-w>k", key = "<C-k>", mode = "n", options = { desc = "Move focus to the upper window" } }, { action = "<cmd>%bd|e#<CR>", key = "<leader>b", mode = "n", options = { desc = "Close other buffers", silent = true } } }
  for i, map in ipairs(__nixvim_binds) do
    vim.keymap.set(map.mode, map.key, map.action, map.options)
  end
end
-- }}}

-- Set up autogroups {{
do
  local __nixvim_autogroups = { ["highlight-yank"] = { clear = true }, nixvim_binds_LspAttach = { clear = true } }

  for group_name, options in pairs(__nixvim_autogroups) do
    vim.api.nvim_create_augroup(group_name, options)
  end
end
-- }}
-- Set up autocommands {{
do
  local __nixvim_autocommands = { { callback = function()
  do
    local __nixvim_binds = { }
    for i, map in ipairs(__nixvim_binds) do
      vim.keymap.set(map.mode, map.key, map.action, map.options)
    end
  end
end
, desc = "Load keymaps for LspAttach", event = "LspAttach", group = "nixvim_binds_LspAttach" }, { callback = function() vim.highlight.on_yank() end, desc = "Highlight when yanking (copying) text", event = "TextYankPost", group = "highlight-yank" } }

  for _, autocmd in ipairs(__nixvim_autocommands) do
    vim.api.nvim_create_autocmd(
      autocmd.event,
      {
        group     = autocmd.group,
        pattern   = autocmd.pattern,
        buffer    = autocmd.buffer,
        desc      = autocmd.desc,
        callback  = autocmd.callback,
        command   = autocmd.command,
        once      = autocmd.once,
        nested    = autocmd.nested
      }
    )
  end
end
-- }}


